document.addEventListener('DOMContentLoaded', () => {
    const questionTextElement = document.getElementById('question-text');
    const answerLengthHintElement = document.getElementById('answer-length-hint');
    const answerInputElement = document.getElementById('answer-input');
    const submitAnswerButton = document.getElementById('submit-answer-button');
    const feedbackDisplayElement = document.getElementById('feedback-display');
    const generalFeedbackElement = document.getElementById('general-feedback');
    const attemptsLeftDisplayElement = document.getElementById('attempts-left-display');
    const nextButton = document.getElementById('next-button');
    const scoreElement = document.getElementById('score');

    const resultAreaElement = document.getElementById('result-area');
    const finalScoreElement = document.getElementById('final-score');
    const totalQuestionsElement = document.getElementById('total-questions');
    const restartButton = document.getElementById('restart-button');

    const questionAreaElement = document.getElementById('question-area');
    const controlsAreaElement = document.getElementById('controls-area');
    const scoreAreaElement = document.getElementById('score-area'); // Score display area

    let allQuestions = [];
    let selectedQuestions = [];
    let currentQuestionIndex = 0;
    let currentAnswer = "";
    let score = 0;
    let attemptsLeft = 0;
    const MAX_ATTEMPTS = 3;
    const NUM_QUESTIONS_TO_SHOW = 10; // 表示する問題数

    async function loadQuestions() {
        try {
            const response = await fetch('train_questions.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status} on ${response.url}`);
            }
            allQuestions = await response.json();
            if (!allQuestions || allQuestions.length === 0) {
                displayError('問題データが空か、読み込みに失敗しました。');
                return;
            }
            startGame();
        } catch (error) {
            console.error('問題の読み込みに失敗:', error);
            displayError(`問題の読み込みエラー: ${error.message}。ファイルパスやJSON形式を確認してください。`);
        }
    }

    function displayError(message) {
        questionTextElement.textContent = message;
        answerLengthHintElement.style.display = 'none';
        document.getElementById('input-area').style.display = 'none';
        attemptsLeftDisplayElement.style.display = 'none';
        generalFeedbackElement.style.display = 'none';
    }

    function startGame() {
        score = 0;
        currentQuestionIndex = 0;
        updateScoreDisplay();

        // 問題をシャッフルし、一部を選択
        selectedQuestions = shuffleArray([...allQuestions]).slice(0, NUM_QUESTIONS_TO_SHOW);
        if (selectedQuestions.length === 0 && allQuestions.length > 0) {
            selectedQuestions = shuffleArray([...allQuestions]); // 元データが少ない場合は全て
        }
        
        totalQuestionsElement.textContent = selectedQuestions.length;
        resultAreaElement.style.display = 'none';
        questionAreaElement.style.display = 'block';
        controlsAreaElement.style.display = 'block';
        scoreAreaElement.style.display = 'block';
        answerLengthHintElement.style.display = 'block';
        document.getElementById('input-area').style.display = 'flex';
        attemptsLeftDisplayElement.style.display = 'block';
        generalFeedbackElement.style.display = 'block';


        if (selectedQuestions.length > 0) {
            displayQuestion();
        } else {
            displayError('表示できるクイズ問題がありません。');
        }
    }

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    function displayQuestion() {
        if (currentQuestionIndex < selectedQuestions.length) {
            const questionData = selectedQuestions[currentQuestionIndex];
            questionTextElement.textContent = questionData.question;
            currentAnswer = questionData.answer_entity.trim(); // 正解の文字列、前後の空白除去

            answerLengthHintElement.textContent = `答えは ${currentAnswer.length} 文字です。`;
            answerInputElement.value = "";
            answerInputElement.maxLength = currentAnswer.length; // 最大文字数を設定
            answerInputElement.disabled = false;
            
            feedbackDisplayElement.innerHTML = "";
            generalFeedbackElement.textContent = "";
            generalFeedbackElement.className = "";

            attemptsLeft = MAX_ATTEMPTS;
            attemptsLeftDisplayElement.textContent = `挑戦回数: あと ${attemptsLeft} 回`;
            
            submitAnswerButton.disabled = false;
            nextButton.style.display = 'none';
        } else {
            showResults();
        }
    }

    submitAnswerButton.addEventListener('click', handleSubmitAnswer);
    answerInputElement.addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            handleSubmitAnswer();
        }
    });


    function handleSubmitAnswer() {
        if (submitAnswerButton.disabled) return;

        const userInput = answerInputElement.value.trim();

        if (userInput.length !== currentAnswer.length) {
            generalFeedbackElement.textContent = `答えは ${currentAnswer.length} 文字で入力してください。`;
            generalFeedbackElement.className = "incorrect";
            return;
        }

        attemptsLeft--;
        let isCorrect = userInput === currentAnswer;
        
        let feedbackSymbols = []; // ['✅', '☑️', '❌'] を格納

        if (isCorrect) {
            score++;
            generalFeedbackElement.textContent = "正解！ 🎉";
            generalFeedbackElement.className = "correct";
            feedbackSymbols = userInput.split('').map(() => '✅');
            finalizeAttempt();
        } else {
            const answerChars = currentAnswer.split('');
            const inputChars = userInput.split('');
            const tempFeedback = new Array(currentAnswer.length).fill(null);
            const answerCharCounts = {};

            for (const char of answerChars) {
                answerCharCounts[char] = (answerCharCounts[char] || 0) + 1;
            }

            // 1st pass: Correct position (✅)
            for (let i = 0; i < currentAnswer.length; i++) {
                if (inputChars[i] === answerChars[i]) {
                    tempFeedback[i] = '✅';
                    answerCharCounts[inputChars[i]]--;
                }
            }

            // 2nd pass: Present but wrong position (☑️) or absent (❌)
            for (let i = 0; i < currentAnswer.length; i++) {
                if (tempFeedback[i] === null) { // If not already marked green
                    if (answerChars.includes(inputChars[i]) && answerCharCounts[inputChars[i]] > 0) {
                        tempFeedback[i] = '☑️';
                        answerCharCounts[inputChars[i]]--;
                    } else {
                        tempFeedback[i] = '❌';
                    }
                }
            }
            feedbackSymbols = tempFeedback;

            if (attemptsLeft > 0) {
                generalFeedbackElement.textContent = `不正解です。`;
                generalFeedbackElement.className = "incorrect";
            } else {
                generalFeedbackElement.textContent = `残念！正解は「${currentAnswer}」でした。`;
                generalFeedbackElement.className = "incorrect";
                finalizeAttempt();
            }
        }
        
        feedbackDisplayElement.innerHTML = feedbackSymbols.join(' ');
        attemptsLeftDisplayElement.textContent = `挑戦回数: あと ${attemptsLeft} 回`;
        updateScoreDisplay();
    }

    function finalizeAttempt() {
        submitAnswerButton.disabled = true;
        answerInputElement.disabled = true;
        nextButton.style.display = 'inline-block';
    }

    function updateScoreDisplay() {
        scoreElement.textContent = score;
    }

    function nextQuestionHandler() {
        currentQuestionIndex++;
        displayQuestion();
    }

    function showResults() {
        questionAreaElement.style.display = 'none';
        controlsAreaElement.style.display = 'none';
        // scoreAreaElement.style.display = 'none'; // Keep score visible for final results
        resultAreaElement.style.display = 'block';
        finalScoreElement.textContent = score;
        totalQuestionsElement.textContent = selectedQuestions.length; // 表示した問題数
    }

    nextButton.addEventListener('click', nextQuestionHandler);
    restartButton.addEventListener('click', startGame);

    loadQuestions();
});
